This Python shopping cart system features two classes: ItemToPurchase and ShoppingCart. The ItemToPurchase class defines individual items with attributes 
for the name, price, and quantity and includes a method to print the total cost of the item based on these attributes. 
The ShoppingCart class represents a customer's cart; it is initialized with characteristics for the customer's name, the current date, 
and a list of store items. It incorporates several methods to manage the cart's contents:
•	Add_item adds an item to the cart.
•	Remove_item removes an item by its name, providing feedback if the item is not found.
•	Modify_item updates the quantity and price of an existing item, also indicating if the item isn't found in the cart.
Additionally, the class includes:
•	Methods for calculating the total number of items (get_num_items_in_cart).
•	Determining the total cost of the cart (get_cost_of_cart).
•	Printing the total cost of all items (print_total).
•	Listing item descriptions (print_descriptions).
Features a print_menu function for an interactive menu for the user, allowing them to add, remove, or modify items, view item descriptions, 
print the total cart cost, or exit the program, including input validation and error handling. The remove_item() method in the ShoppingCart class 
checks if an item exists in the cart before attempting to remove it, and an error message is printed if the item is not found. Similarly, 
the modify_item() method ensures that modifications only occur if the item exists. Otherwise, it informs the user that no changes were made. 
There are checks to ensure item names are not empty when adding or modifying items. Other checks were added to ensure item prices and quantities 
were non-negative when adding or modifying items: ensuring item names were not empty and prices/quantities were positive when adding or modifying items.

Python Source Code: 

class ItemToPurchase:
    def __init__(self, item_name="none", item_price=0.0, item_quantity=0):
        self.item_name = item_name
        self.item_price = item_price
        self.item_quantity = item_quantity

    def print_item_cost(self):
        total_cost = self.item_price * self.item_quantity
        print(f"{self.item_name} {self.item_quantity} @ ${self.item_price} = ${total_cost}")

class ShoppingCart:
    def __init__(self, customer_name="none", current_date="January 1, 2020"):
        self.customer_name = customer_name
        self.current_date = current_date
        self.cart_items = []

    def add_item(self, item):
        if item.item_name == "":
            print("Item name cannot be empty.")
            return
        if item.item_price < 0:
            print("Item price cannot be negative.")
            return
        if item.item_quantity < 0:
            print("Item quantity cannot be negative.")
            return
        self.cart_items.append(item)

    def remove_item(self, item_name):
        found = False
        for item in self.cart_items:
            if item.item_name == item_name:
                self.cart_items.remove(item)
                found = True
                break
        if not found:
            print("Item not found in cart. Nothing removed.")

    def modify_item(self, item):
        for cart_item in self.cart_items:
            if cart_item.item_name == item.item_name:
                if item.item_price < 0:
                    print("Item price cannot be negative.")
                    return
                if item.item_quantity < 0:
                    print("Item quantity cannot be negative.")
                    return
                cart_item.item_quantity = item.item_quantity
                cart_item.item_price = item.item_price
                return
        print("Item not found in cart. Nothing modified.")

    def get_num_items_in_cart(self):
        return sum(item.item_quantity for item in self.cart_items)

    def get_cost_of_cart(self):
        return sum(item.item_price * item.item_quantity for item in self.cart_items)

    def print_total(self):
        if len(self.cart_items) == 0:
            print("SHOPPING CART IS EMPTY")
        else:
            print(f"{self.customer_name}'s Shopping Cart - {self.current_date}")
            print(f"Number of Items: {self.get_num_items_in_cart()}")
            for item in self.cart_items:
                item.print_item_cost()
            print(f"Total: ${self.get_cost_of_cart()}")

    def print_descriptions(self):
        print(f"{self.customer_name}'s Shopping Cart - {self.current_date}")
        print("Item Descriptions")
        for item in self.cart_items:
            print(f"{item.item_name}: {item.item_quantity} @ ${item.item_price}")

def print_menu(cart):
    menu = """
MENU
a - Add item to cart
r - Remove item from cart
c - Change item quantity
i - Output items' descriptions
o - Output shopping cart
q - Quit
Choose an option:
"""
    while True:
        print(menu)
        option = input().lower()
        if option == 'a':
            name = input("Enter the item name:\n")
            if name == "":
                print("Item name cannot be empty.")
                continue
            description = input("Enter the item description:\n")
            while True:
                try:
                    price = float(input("Enter the item price:\n"))
                    if price < 0:
                        print("Please enter a positive price.")
                        continue
                    break
                except ValueError:
                    print("Please enter a valid price.")
            while True:
                try:
                    quantity = int(input("Enter the item quantity:\n"))
                    if quantity < 0:
                        print("Please enter a positive quantity.")
                        continue
                    break
                except ValueError:
                    print("Please enter a valid quantity.")
            cart.add_item(ItemToPurchase(name, price, quantity))
        elif option == 'r':
            name = input("Enter name of item to remove:\n")
            cart.remove_item(name)
        elif option == 'c':
            name = input("Enter the item name:\n")
            if name == "":
                print("Item name cannot be empty.")
                continue
            while True:
                try:
                    quantity = int(input("Enter the new quantity:\n"))
                    if quantity < 0:
                        print("Please enter a positive quantity.")
                        continue
                    break
                except ValueError:
                    print("Please enter a valid quantity.")
            cart.modify_item(ItemToPurchase(name, 0, quantity))
        elif option == 'i':
            cart.print_descriptions()
        elif option == 'o':
            cart.print_total()
        elif option == 'q':
            break
        else:
            print("Choose a valid option.")

if __name__ == "__main__":
    customer_name = input("Enter customer's name:\n")
    current_date = input("Enter today's date:\n")
    print(f"Customer name: {customer_name}")
    print(f"Today's date: {current_date}")

    cart = ShoppingCart(customer_name, current_date)
    print_menu(cart)
